on:

  schedule:
    - cron: "0 0 * * *"
  repository_dispatch:
    types: [trigger-nightly-publish]

name: Publish Nightly

jobs:
  check:
    name: Check for updates to Nightly
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.earlyexit.conclusion }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          depth: 0
      - id: earlyexit
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          if git rev-parse vNightly >/dev/null 2>&1; then
            if [ ${git show-ref -s vNightly} = ${git show-ref -s HEAD} ]; then
              echo "No changes since last nightly build. Exiting."
              exit 1
            else
              echo "Updating vNightly ref"
              git push origin :refs/tags/vNightly
              git tag --delete tagname
              git tag vNightly
              git push origin vNightly
            fi
          else
            git tag vNightly
            git push origin vNightly
          fi
  publish:
    name: Publish Nightly
    needs: check
    runs-on: ubuntu-latest
    if: needs.check.outputs.status == 'success'
    steps:
      - name: Install
        run: npm i
      - name: Patch Package for Nightly
        run: |
          node -e "var p = require('./package.json'); var d = new Date(); console.log(JSON.stringify({...p, name: p.name+'-nightly', displayName: p.displayName + ' (Nightly)', version: ''+d.getFullYear()+'.'+d.getMonth()+'.'+d.getDay()+d.getHours()+d.getMinutes() }))" > ./package.nightly.json
          mv package.nightly.json package.json
      - name: Generate Name
        run: node -e "console.log('PACKAGE_NAME=' + require('./package.json').name + '-v' + require('./package.json').version)" >> $GITHUB_ENV
      - name: Build Extension
        run: npx vsce package -o ./${{ env.PACKAGE_NAME }}.vsix
      - name: Publish Extension
        run: npx vsce publish --packagePath ./${{ env.PACKAGE_NAME }}.vsix -p ${{ secrets.MARKETPLACE_PAT }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: vNightly
          release_name: Nightly Build
          draft: false
          prerelease: true
      - name: Upload GitHub Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PACKAGE_NAME }}.vsix
          asset_name: ${{ env.PACKAGE_NAME }}.vsix
          asset_content_type: application/zip